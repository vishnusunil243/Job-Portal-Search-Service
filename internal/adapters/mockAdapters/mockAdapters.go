// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/adapterInterface.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/vishnusunil243/Job-Portal-Search-Service/entities"
	helperstruct "github.com/vishnusunil243/Job-Portal-Search-Service/internal/helper/helperstruct"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockAdapterInterface is a mock of AdapterInterface interface.
type MockAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterInterfaceMockRecorder
}

// MockAdapterInterfaceMockRecorder is the mock recorder for MockAdapterInterface.
type MockAdapterInterfaceMockRecorder struct {
	mock *MockAdapterInterface
}

// NewMockAdapterInterface creates a new mock instance.
func NewMockAdapterInterface(ctrl *gomock.Controller) *MockAdapterInterface {
	mock := &MockAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapterInterface) EXPECT() *MockAdapterInterfaceMockRecorder {
	return m.recorder
}

// AddSearchHistory mocks base method.
func (m *MockAdapterInterface) AddSearchHistory(arg0 entities.SearchHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSearchHistory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSearchHistory indicates an expected call of AddSearchHistory.
func (mr *MockAdapterInterfaceMockRecorder) AddSearchHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSearchHistory", reflect.TypeOf((*MockAdapterInterface)(nil).AddSearchHistory), arg0)
}

// GetAverageRatingOfCompany mocks base method.
func (m *MockAdapterInterface) GetAverageRatingOfCompany(companyId string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageRatingOfCompany", companyId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageRatingOfCompany indicates an expected call of GetAverageRatingOfCompany.
func (mr *MockAdapterInterfaceMockRecorder) GetAverageRatingOfCompany(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageRatingOfCompany", reflect.TypeOf((*MockAdapterInterface)(nil).GetAverageRatingOfCompany), companyId)
}

// GetReviewCheck mocks base method.
func (m *MockAdapterInterface) GetReviewCheck(userId, companyId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewCheck", userId, companyId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewCheck indicates an expected call of GetReviewCheck.
func (mr *MockAdapterInterfaceMockRecorder) GetReviewCheck(userId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewCheck", reflect.TypeOf((*MockAdapterInterface)(nil).GetReviewCheck), userId, companyId)
}

// GetReviewsByCompany mocks base method.
func (m *MockAdapterInterface) GetReviewsByCompany(companyId string) ([]bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByCompany", companyId)
	ret0, _ := ret[0].([]bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByCompany indicates an expected call of GetReviewsByCompany.
func (mr *MockAdapterInterfaceMockRecorder) GetReviewsByCompany(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByCompany", reflect.TypeOf((*MockAdapterInterface)(nil).GetReviewsByCompany), companyId)
}

// GetSearchHistory mocks base method.
func (m *MockAdapterInterface) GetSearchHistory(userId string) (entities.SearchHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchHistory", userId)
	ret0, _ := ret[0].(entities.SearchHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchHistory indicates an expected call of GetSearchHistory.
func (mr *MockAdapterInterfaceMockRecorder) GetSearchHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchHistory", reflect.TypeOf((*MockAdapterInterface)(nil).GetSearchHistory), userId)
}

// UpdateSearchHistory mocks base method.
func (m *MockAdapterInterface) UpdateSearchHistory(arg0 entities.SearchHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSearchHistory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSearchHistory indicates an expected call of UpdateSearchHistory.
func (mr *MockAdapterInterfaceMockRecorder) UpdateSearchHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSearchHistory", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateSearchHistory), arg0)
}

// UserAddReview mocks base method.
func (m *MockAdapterInterface) UserAddReview(req helperstruct.ReviewHelper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddReview", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddReview indicates an expected call of UserAddReview.
func (mr *MockAdapterInterfaceMockRecorder) UserAddReview(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddReview", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddReview), req)
}

// UserDeleteReview mocks base method.
func (m *MockAdapterInterface) UserDeleteReview(userId, companyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteReview", userId, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleteReview indicates an expected call of UserDeleteReview.
func (mr *MockAdapterInterfaceMockRecorder) UserDeleteReview(userId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteReview", reflect.TypeOf((*MockAdapterInterface)(nil).UserDeleteReview), userId, companyId)
}
